// #include <ros/ros.h>
// #include <ros/package.h>
// #include <yaml-cpp/yaml.h>
// #include <image_transport/image_transport.h>
// #include <opencv2/highgui.hpp>
// #include <opencv2/core.hpp>
// #include <opencv2/imgproc.hpp>
// #include <cv_bridge/cv_bridge.h>
// #include <fstream>
// #include <string>
// using std::cout;
// using std::endl; 

// class SeulCaliMatrix{
//     public:
        
//         SeulCaliMatrix(std::string my_file_path)
//         : file_path(my_file_path){
//             cv::FileStorage fs(file_path,cv::FileStorage::READ);    
//             if(!fs.isOpened()){std::cerr<<"file read error\n";}
//             image_width = (int)fs["image_width"];
//             image_height = (int)fs["image_height"];
//             cam_matrix = fs["camera_matrix"].mat();
//             dist_coeffs = fs["distortion_coefficients"].mat();
//             MyUdistorRectMap(cv::Size(image_width,image_height));
//         }

//         void SetCamMatrix(cv::Mat my_cam_matrix){
//             cam_matrix = my_cam_matrix;
//         }
//         cv::Mat GetCamMatrix(){
//             return cam_matrix;
//         }

//         void SetDistCoeffs(cv::Mat my_sdist_coeffs){
//             dist_coeffs = my_sdist_coeffs;
//         }
//         cv::Mat GetDistCoeffs(){
//             return dist_coeffs;
//         }    
        
//         void MyReMap(cv::Mat& frame){
//             cv::remap(frame,frame,map1,map2,cv::INTER_LINEAR);
//         }
        
//     private:
//         cv::Mat cam_matrix;
//         cv::Mat dist_coeffs;
//         cv::Mat map1;
//         cv::Mat map2;
//         std::string file_path;
//         int image_height;   
//         int image_width;

//         void MyUdistorRectMap(cv::Size img_size){
//             int m1type = CV_32FC1;
//             cv::initUndistortRectifyMap(cam_matrix,dist_coeffs,cv::Mat::eye(3, 3, CV_64FC1),
//                                         cam_matrix,img_size,m1type,map1,map2);
//         }
         
// };


// int main(int argc, char *argv[])
// {    
    

//     /*How To Use*/
//     // std::string path = ros::package::getPath("PreProcess")+"/src/camera_main.yaml";
//     ///*none ros dependency*///
//     //// std::string path = "./camera_main.yaml";
//     // SeulCaliMatrix cali_img(path);
//     // cv::VideoCapture cap;
//     // cv::Mat frame;
//     // int cam_num = 1;
//     // cap.open(cam_num);
//     // while(1){
//     //     cap >> frame;
//     //     cv::imshow("frame before calibration",frame);
//     //     cali_img.MyReMap(frame);
//     //     cv::imshow("frame after calibration",frame);
//     //     int ckey = cv::waitKey(1);
//     //     if(ckey == 27)break;
//     // }

//     return 0;
// }
